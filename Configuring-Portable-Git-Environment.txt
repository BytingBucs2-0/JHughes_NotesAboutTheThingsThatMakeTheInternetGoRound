Joshua M. Hughes
1/21/2017
COP2830
Professor Barrell

Title: Creating a true portable Git-Bash environment

Abstract: The Git-Bash portable will execute from a portable device; however, the default initialization scripts will map the users HOME directory as well as other enviroment variables to the Windows User Profile on the hard drive. This will result in generated/saved SSH keys, stored authentication credentials, and other global configurations being saved to a configuration file in the Windows User Profile. If using a computer with public accesibility this can introduce a security risk. Furthermore, after ejecting the portable drive the stored configurations will not transfer with the portable device. This will result in recreating the global configurations each time the portable device is ejected and mounted. This document will provide the steps necessary for creating a true portable Git-Bash environment.

Step 1 - Identifying Environment Variables

	The first step is to identify Environment Variables that reference the Windows User Profile. You may also use this step to identify other Environment Variables that may pertain to your development environment. We will use the printenv command to display all Environment Variables for the current environment in the console. 
	
	- Execute the default bin-bash portable executable (git-bash.exe)
	- From the bash command prompt type the command: printenv
	- Identify the enviroment variables to modified and then close the bash shell
	
Step 2 - Create Portable HOME Location

	After identifying environment variables, we must now begin creating our portable environment. We will use File Explorer to create a new HOME directory.
	
	- Open File Explorer
	- Browse to the installation directory for your portable GIT install (e.g. D:\PortableApps\PortableGit\)
	- This directory will contain other folders such as bin, etc, tmp, and usr
	- Create a new directory named home
	- In the home directory create another directory for your portable environment (e.g. D:\PortableApps\PortableGit\home\joshua)
	
Step 3 - Set Portable Environment Variables

	For this example we will set environment variables following the guide provided by VonC and Mark Bell on stackoverflow.com. We will open the Bash Profile configuration file using a text editor. Finally, we will enter environment variables.
	
	- Open File Explorer
	- Browse to the etc folder in the installation directory for your portable GIT install (e.g. D:\PortableApps\PortableGit\etc)
	- Locate a file named profile and open the file in a text editor
	- As the environment variables may be used in the profile initialization script it is important to set the new environment variables in the begining of the file. The order in which the enviroment variables are set is important. Dependent variables must be set after the parent variables.
	- Locate the line in the text editor that contains the following text: # System-wide profile file
	- Type the following lines of text into the text file below the line identified in the previous step:
	
				# Setting custom Environment Variables to portable drive
					HOMEDRIVE="/"
					
					HOME="/home/joshua"
					HOME="$(cd "$HOME" ; pwd)"

					USERPROFILE="${HOME}"
					HOMEPATH="${USERPROFILE}"
					HISTFILE="${USERPROFILE}/.bash_history"
					BASHRC="${USERPROFILE}/.bashrc"

	- Save the file and close the text editor
	
Step 4 - Confirm Portable Environment Variables

	We will now mount the portable drive and execute the bash shell environment. After initializing the bash shell, we will confirm that our environment variables were properly set
	
	- Execute the default bin-bash portable executable (git-bash.exe)
	- From the bash command prompt type the print environment command 
	
		printenv
		
	- Confirm the enviroment variables were set as expected
	
Step 5 - Set Git Global Configuration Parameters

	We will now set the git Global Configuration parameters and confirm that the configuration files are stored on the portable device.

	- Set the git user.name global variable
		
		git config --global user.name "Your Name"
			
	- Set the git user.email global variable
	
		git config --global user.email you@yourdomain.com
		
	- Open File Explorer
	- Browse to the etc folder in the installation directory for your portable GIT install (e.g. D:\PortableApps\PortableGit\home\joshua\)
	- You should confirm that the .bash_history and .gitconfig files were created in your home directory
	
Step 6 - Clone a GitHub Repository

	We will now browse to the location on our portable drive in which our clones repository will be created. We will then clone a GitHub Repository to our new portable environment. This repository will be used later to configure local authentication.
	
	- Login to your GitHub account and create a new repository
	- Copy the repository location to the clipboard
	- Identify the drive letter assigned to the portable device
	- Change to the appropriate location using bash commands
	
		cd /d/COP2830
			
	- Clone the repository to your portable environment

		git clone https://github.com/BytingBucs2-0/JHughes_NotesAboutTheThingsThatMakeTheInternetGoRound.git
	
	- After the clone is complete, change to the new repository directory
	
		cd JHughes_NotesAboutTheThingsThatMakeTheInternetGoRound/
		
	- Create/Save a new file in the repository
	- Check the status of the repository
	
		git status

	- Add the new file to the commit files
	
		git add Configuring Portable Git Environment.txt

	- Check the status of the repository to confirm the file was added to the commit files
	
		git status
		
	- Commit the files
	
		git commit -m "Initial Remote Commit"
	
	- Push the changes to the cloned repository
	
		git push
		
	- Type in your username for the repository when prompted
	- Type your password for the repository when prompted
	- You cloned repository should now list the same files as your remote repository on the Git Hub site
	
Step 7 - Configuring Authentication Using Stored Credentials

	We will now store our credentials for the repository. It is important to note that the stored credentials file is used when accessing a Git repository using the HTTPS protocol. 
	
	- Create the crendentials file and store the credentials for the repository
	
		git config credential.helper store
		
	- To set the stored credtials we must execute a push to the repository
	
		git push 
		
	- Type in your username for the repository when prompted
	- Type your password for the repository when prompted
	- Your credentials will be stored in a file named .git-credentials in your portable HOME folder (e.g. D:\PortableApps\PortableGit\home\joshua\)
	
Step 8 - Configuring Authentication Using SSH Keys

	We will now generate SSH keys for authenticating with our Git Hub repository. It is important to note that the SSH keys authentication method is used when accessing a Git repository using the SSH protocol.
	
	- Change the working directory to the portable HOME directory (DO NOT STORE THE SSH KEYS IN YOUR REPOSITORY)
	
		cd ~
		
	- Create a new .ssh directory for storing the SSH keys
	
		mkdir .ssh
		
	- Generate your SSH keys (note: paramter flags are case sensitive)
	
		ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
	
	- Enter the path to your portable HOME and a file name when prompted for a save location
		
		/home/joshua/.ssh/id_rsa
		
	- Enter a passphrase when prompted
	- Your public and private SSH keys will now be saved in the portable HOME/.ssh directory
	- We must now create an initialization script to ensure the ssh-agent is started when the bash shell is initialized
	- Open File Explorer
	- Browse to the portable HOME folder in the installation directory for your portable GIT install (e.g. D:\PortableApps\PortableGit\home\joshua\)
	- Create an empty file named profile
	- Paste the initialization script provided below into the file
	
											SSH_ENV="$HOME/.ssh/environment"

											# start the ssh-agent
											function start_agent {
												echo "Initializing new SSH agent..."
												# spawn ssh-agent
												ssh-agent | sed 's/^echo/#echo/' > $SSH_ENV
												echo succeeded
												chmod 600 $SSH_ENV
												. $SSH_ENV > /dev/null
												ssh-add
											}

											# test for identities
											function test_identities {
												# test whether standard identities have been added to the agent already
												ssh-add -l | grep "The agent has no identities" > /dev/null
												if [ $? -eq 0 ]; then
													ssh-add
													# $SSH_AUTH_SOCK broken so we start a new proper agent
													if [ $? -eq 2 ];then
														start_agent
													fi
												fi
											}

											# check for running ssh-agent with proper $SSH_AGENT_PID
											ps -ef | grep $SSH_AGENT_PID | grep ssh-agent > /dev/null
											if [ $? -eq 0 ]; then
												test_identities
											# if $SSH_AGENT_PID is not properly set, we might be able to load one from
											# $SSH_ENV
											else
												. $SSH_ENV > /dev/null
												ps -ef | grep $SSH_AGENT_PID | grep ssh-agent > /dev/null
												if [ $? -eq 0 ]; then
													test_identities
												else
													start_agent
												fi
											fi
	- Save the file and close the text editor
	- Your SSH keys must now be added to your Git Hub account.
	- Login to your Git Hub Account and open Settings => SSH and GPG Keys 
	- Click on "New SSH Key"
	- Enter the email used to generate the SSH keys in the "Title" field
	- Open the SSH key file named id_rsa.pub located in your portable HOME Directory using your text editor
	- Copy the entire contents of the file to the clipboard
	- Paste the entire contents of the clipboard into the "Key" box on the Git Hub site
	- Click "Add SSH Key"
	- The SSH Key will now be assocaited with your account
	- Browse to the repository on your Git Hub account
	- Copy the SSH clone link to the clipboard
	- Perform the procedure in Step 6 for cloning a the repository using the SSH link
	- If you have previously used the HTTPS protocol and stored credentials to clone the repository, you must change the repository configuration file to use the SSH protocol
	- Browse to the repository on your portable device
	- Open the .git folder (The folder may be hidden)
	- Use your text editor to open the config file in the .git directory
	- Locate the url parameter in the [remote "origin"] section
	- Change the url to the SSH link copied from the Git Hub Repository
	- Close the bash shell and reopen the bash shell
	- Change to the appropriate repository location using bash commands
	
		cd /d/COP2830/JHughes_NotesAboutTheThingsThatMakeTheInternetGoRound/
	
	- Check the status of the repository to confirm the file was added to the commit files
	
		git status
		
	- Commit the files
	
		git commit -a -m "Modified Text Files. Commit and push using SSH."
	
	- Push the changes to the cloned repository
	
		git push 
	
REFERENCES: 

	http://stackoverflow.com/questions/3454774/fix-msysgit-portable-home-location
	https://markb.co.uk/portable-git-windows-setting-home-environment-variable.html
	https://help.github.com/articles/connecting-to-github-with-ssh/
	https://git-scm.com/docs/git-credential-store
	https://git-scm.com/docs/git-clone
	https://git-scm.com/docs/git-push
	

	
